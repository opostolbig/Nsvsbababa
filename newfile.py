import asyncio
import random
from telethon import TelegramClient, events
from telethon import Button
from telethon.tl.types import InputReportReasonSpam
import os
from re import compile as compile_link
from os import listdir, path as ospath

# –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã APIp
api_id = 22075720  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π api_id
api_hash = '381b83e04ceaf4a328a99ac789d52f02'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π api_hash
bot_token = '8046436338:AAFZsT2Lme0DgJjO6h7I_UGFePt3wE-V_h4'  # –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –°–ø–∏—Å–æ–∫ API –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ —Ö–µ—à–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–π
api_credentials = [
  {'api_id': '28234677', 'api_hash': 'e7c47bee153e7c54524d4086c650027d', 'phone': '+79950652058'},
  {'api_id': '21360694', 'api_hash': 'dacae7f3be65e55128fb85e2e6721c88', 'phone': '+79690173115'},
  {'api_id': '20249962', 'api_hash': '5b4df1012c71f7fc2baa086b726e551d', 'phone': '+447402594195'},
  {'api_id': '27293299', 'api_hash': '2325d766046e3b1637f5b0fa22c562eb', 'phone': '+79102533246'},
  {'api_id': '26158693', 'api_hash': '180fd68a14d5a1422dcf81bf8f4ffe37', 'phone': '+79507915811'},
  {'api_id': '23037915', 'api_hash': '50f06f5b2223586fde0d1379ea91ebc7', 'phone': '+79921870852'},
  {'api_id': '29512095', 'api_hash': '0b29a7d42fff002856b9bed64f7ec919', 'phone': '+79910057650'},
  {'api_id': '25055016', 'api_hash': '25edf5b7becebe91a2d61fe8d9d9931b', 'phone': '+79921802240'},
  {'api_id': '21156147', 'api_hash': '90408de329b27f7dd411dff3e601acc6', 'phone': '+79013929006'},
  {'api_id': '29840977', 'api_hash': 'e20b6a9fd01cc9055de0a88a183a030b', 'phone': '+79528625019'},
  {'api_id': '29412963', 'api_hash': '3e37e1d05422db9426aa85e617b441ea', 'phone': '+79105272669'},
  {'api_id': '23140129', 'api_hash': '431e5e839aecf4abdce22d7663acffa7', 'phone': '+79105275170'},
  {'api_id': '28712009', 'api_hash': '94fde6f4d57e3451649331da114783a1', 'phone': '+79264293540'},
  {'api_id': '20003929', 'api_hash': 'd437fb59350c51fc77277356f70abb1a', 'phone': '+79019703042'},
  {'api_id': '25908772', 'api_hash': 'd7cc217ade2f50ab1ab8d8187a223e89', 'phone': '+79105281438'},
  {'api_id': '23907100', 'api_hash': '225c7759435456bafda67f2729318980', 'phone': '+79921944641'},
  {'api_id': '27757367', 'api_hash': '0c3c400d46b47bcf2c98d182fd3a7fd7', 'phone': '+79382974095'},
  {'api_id': '23474941', 'api_hash': 'd1b527d8924a799e3556f48045975d21', 'phone': '+79999729141'},
  {'api_id': '26055857', 'api_hash': '75bf9ca9dccaabe27f3a391183875e1e', 'phone': '+79266067940'},
  {'api_id': '26462182', 'api_hash': '001b0d73e563bfb912d48eeee38dce61', 'phone': '+79267887980'},
  {'api_id': '25481303', 'api_hash': '7b4496634fc1aa143b254aa7e4c50c09', 'phone': '+79522670786'},
  {'api_id': '26304685', 'api_hash': 'b52e8360adc6904c98ff6ee8b7b7cb08', 'phone': '+79104336003'},
  {'api_id': '27019945', 'api_hash': '3b42e8a707d42a9ac244b99c294f5340', 'phone': '+79850353412'},
  {'api_id': '20097016', 'api_hash': '18962b749f03a5db10264cbb7b13f5af', 'phone': '+79251650129'},
  {'api_id': '25639241', 'api_hash': '4be85e762c4a24167094b5f6e8517eda', 'phone': '+79167741290'}
]


# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
admins_id = []
owner_id = 7166220534

# –ü—É—Ç—å –∫ —Å–µ—Å—Å–∏—è–º
path_to_sessions = ospath.join(ospath.dirname(__file__), "sessions")
if not os.path.exists(path_to_sessions):
    os.makedirs(path_to_sessions)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_admins():
    global admins_id
    try:
        with open("adm.txt", "r") as file:
            admins_id = [int(line.strip()) for line in file.readlines()]
    except FileNotFoundError:
        admins_id = []

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞
bot = TelegramClient(f'{path_to_sessions}/bot', api_id, api_hash)

async def main():
    await bot.start(bot_token=bot_token)
    load_admins()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await validate_sessions()
    await bot.run_until_disconnected()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id):
    try:
        with open("sub.txt", "r") as file:
            subscriptions = file.readlines()
            for subscription in subscriptions:
                if subscription.strip():
                    sub_id, _ = subscription.strip().split(", ")
                    if str(user_id) == sub_id:
                        return True
    except FileNotFoundError:
        return False
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–π—Ç-–ª–∏—Å—Ç–∞
async def check_whitelist(user_id):
    try:
        with open("whitelist.txt", "r") as file:
            whitelisted_users = file.readlines()
            for whitelisted_user_id in whitelisted_users:
                if str(user_id) == whitelisted_user_id.strip():
                    return True
    except FileNotFoundError:
        return False
    return False

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
async def validate_sessions():
    valid_sessions = 0
    invalid_sessions = []

    files = listdir(path_to_sessions)
    sessions = [s for s in files if s.endswith(".session") and s != 'bot.session']

    for session in sessions:
        session_path = ospath.join(path_to_sessions, session)

        api_cred = random.choice(api_credentials)  # –°–ª—É—á–∞–π–Ω—ã–π api_id –∏ api_hash –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        api_id = api_cred['api_id']
        api_hash = api_cred['api_hash']

        try:
            async with TelegramClient(session_path, api_id, api_hash) as client:
                await client.start()
                valid_sessions += 1
                print(f"–°–µ—Å—Å–∏—è {session} –≤–∞–ª–∏–¥–Ω–∞.")
        except Exception as e:
            invalid_sessions.append(session)
            print(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è: {session}. –û—à–∏–±–∫–∞: {e}")
            os.remove(session_path)

    if invalid_sessions:
        await bot.send_message(owner_id, f"üõ† –£–¥–∞–ª–µ–Ω—ã {len(invalid_sessions)} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Å—Å–∏–∏.\n"
                                           f"–û—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {valid_sessions}.")
    else:
        await bot.send_message(owner_id, f"‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ –≤–∞–ª–∏–¥–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {valid_sessions}.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Å–µ—Å—Å–∏–∏
def get_random_session():
    files = listdir(path_to_sessions)
    sessions = [s for s in files if s.endswith(".session") and s != 'bot.session']
    return random.choice(sessions) if sessions else None

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã
async def report_message(link):
    message_link_pattern = compile_link(r'https://t.me/(?P<username_or_chat>.+)/(?P<message_id>\d+)')
    match = message_link_pattern.search(link)

    if not match:
        return 0, 0

    chat = match.group("username_or_chat")
    message_id = int(match.group("message_id"))

    session = get_random_session()
    if session is None:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
        return 0, 0

    session_path = ospath.join(path_to_sessions, session)

    api_cred = random.choice(api_credentials)  # –°–ª—É—á–∞–π–Ω—ã–π api_id –∏ api_hash –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    api_id = api_cred['api_id']
    api_hash = api_cred['api_hash']

    async with TelegramClient(session_path, api_id, api_hash) as client:
        if not await client.is_user_authorized():
            print(f"–°–µ—Å—Å–∏—è {session} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.")
            return 0, 0

        if await check_whitelist(chat):
            print(f"–ê—Ç–∞–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∞–π—Ç-–ª–∏—Å—Ç–µ.")
            return 0, 0
        
        try:
            entity = await client.get_entity(chat)
            await client(functions.messages.ReportRequest(
                peer=entity,
                id=[message_id],
                reason=InputReportReasonSpam(),
                message="–í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å–ø–∞–º."
            ))
            print("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
            return 1, 0  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é {session}: {e}")
            return 0, 1  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@bot.on(events.NewMessage(pattern='/start'))
async def start(event):
    first_name = event.sender.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    user_id = event.sender.id

    buttons = [
        [Button.url("üé≤ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "https://telegra.ph/Re1xx-snos-12-07")],
        [Button.url("üí∏ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "https://t.me@O00OO0O0OO0000O")],
        [Button.inline("üíé New snos", b"new_snos")],
        [Button.inline("üìã –ü—Ä–æ—Ñ–∏–ª—å", b"profile")]
    ]

    await event.respond(
        f"üåü ‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {first_name}.\nüåó ‚Ä¢ –¢–≤–æ–µ –∞–π–¥–∏: {user_id}.\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        buttons=buttons
    )

@bot.on(events.CallbackQuery(data=b'new_snos'))
async def new_snos(event):
    user_id = event.sender.id
    if not await check_subscription(user_id):
        await event.respond("ü•å –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ–µ —É!")
        return

    await event.respond("üí´ –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±!")

@bot.on(events.CallbackQuery(data=b'profile'))
async def profile(event):
    user_id = event.sender.id
    first_name = event.sender.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = f"@{event.sender.username}" if event.sender.username else "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
    subscription_status = "–ï—Å—Ç—å" if await check_subscription(user_id) else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    whitelist_status = "–ï—Å—Ç—å" if await check_whitelist(user_id) else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    profile_info = (
        f"üì± –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üó£ –ò–º—è: {first_name}\n"
        f"üóÑ –î–∞–Ω–Ω—ã–µ: id {user_id} / {username}\n"
        f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}\n"
        f"üìÑ –í–∞–π—Ç-–ª–∏—Å—Ç: {whitelist_status}"
    )
    await event.respond(profile_info)
    raise events.StopPropagation

@bot.on(events.NewMessage)
async def handle_message(event):
    if 'https://t.me/' in event.message.message:
        link = event.message.message
        user_id = event.sender.id

        if not await check_subscription(user_id):
            await event.respond("ü•å –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂–∞–ª–æ–±—ã.")
            return

        await event.respond('‚ùÑÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–± –Ω–∞—á–∞–ª–∞—Å—å...')
        
        successful_reports, failed_reports = await report_message(link)

        response_text = f'ü´ß –í—Å–µ –∂–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n–£—Å–ø–µ—à–Ω–æ: {successful_reports}\n–ù–µ—É—Å–ø–µ—à–Ω—ã–µ: {failed_reports}'
        await event.respond(response_text)
    else:
        pass

@bot.on(events.NewMessage(pattern='/give_sub'))
async def give_subscription(event):
    user_id = event.sender.id
    if user_id != owner_id and user_id not in admins_id:
        await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–æ–∫.")
        return
    
    try:
        parts = event.message.message.split(" ")
        if len(parts) != 3:
            await event.respond("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /give_sub (ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)")
            return
        
        target_user_id = int(parts[1])  
        days = int(parts[2]) 
        
        if days == 0:  
            with open("sub.txt", "r") as file:
                subscriptions = file.readlines()
            subscriptions = [sub for sub in subscriptions if sub.strip().split(", ")[0] != str(target_user_id)]
            with open("sub.txt", "w") as file:
                file.writelines("%s\n" % sub for sub in subscriptions)
            await bot.send_message(target_user_id, f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —É–±—Ä–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å ID {user_id}!")
            await event.respond(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É–±—Ä–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id}.")
        else:  
            with open("sub.txt", "a") as file:
                file.write(f"{target_user_id}, {days}\n")
            await bot.send_message(target_user_id, f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –Ω–∞ {days} –¥–Ω—è(–µ–π) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å ID {user_id}!")
            await event.respond(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}.")
    except ValueError:
        await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /give_sub (ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π).")
    except Exception as e:
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")

@bot.on(events.NewMessage(pattern='/give_whitelist'))
async def give_whitelist(event):
    user_id = event.sender.id
    if user_id != owner_id:  
        await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞–π—Ç-–ª–∏—Å—Ç–æ–≤.")
        return
    
    try:
        parts = event.message.message.split(" ")
        if len(parts) != 3:
            await event.respond("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /give_whitelist (ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)")
            return

        target_user_id = int(parts[1])  
        days = int(parts[2])  

        if days == 0:  
            with open("whitelist.txt", "r") as file:
                whitelisted_users = file.readlines()
            whitelisted_users = [user for user in whitelisted_users if user.strip() != str(target_user_id)]
            with open("whitelist.txt", "w") as file:
                file.writelines("%s\n" % user for user in whitelisted_users)
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ –≤–∞–π—Ç-–ª–∏—Å—Ç –±—ã–ª —É–±—Ä–∞–Ω
            await bot.send_message(target_user_id, f"üìÑ –í–∞–π—Ç-–ª–∏—Å—Ç –±—ã–ª —É–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å ID {user_id}.")
            await event.respond(f"üìÑ –í–∞–π—Ç-–ª–∏—Å—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id} —É–±—Ä–∞–Ω.")
        else:
            with open("whitelist.txt", "a") as file:
                file.write(f"{target_user_id}\n")
            await bot.send_message(target_user_id, f"üéâ –í–∞—à–∞ –≤–∞–π—Ç-–ª–∏—Å—Ç –≤—ã–¥–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å ID {user_id}!")
            await event.respond(f"üìÑ –í–∞–π—Ç-–ª–∏—Å—Ç –Ω–∞ {days} –¥–Ω–µ–π –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}.")
    except ValueError:
        await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /give_whitelist (ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π).")
    except Exception as e:
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –≤–∞–π—Ç-–ª–∏—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")

@bot.on(events.NewMessage(pattern='/add_admin'))
async def add_admin(event):
    user_id = event.sender.id
    if user_id != owner_id:  
        await event.respond("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    try:
        parts = event.message.message.split(" ")
        if len(parts) != 2:
            await event.respond("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_admin (ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
            return
        
        target_user_id = int(parts[1])
        with open("adm.txt", "a") as file:
            file.write(f"{target_user_id}\n")
        await event.respond(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    except ValueError:
        await event.respond("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: /add_admin (ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).")
    except Exception as e:
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())